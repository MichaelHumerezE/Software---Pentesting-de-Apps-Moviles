<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Database\QueryException;
use Illuminate\Support\Facades\DB;
use Laravel\Sanctum\Contracts\HasApiTokens;
use OpenAI\Laravel\Facades\OpenAI;
date_default_timezone_set('America/La_Paz');

class AnalisisCBasicoController extends Controller
{
    function __construct()
    {
        $this->middleware('can:producto.index', ['only' => 'index']);
        $this->middleware('producto.create', ['only' => ['create', 'store']]);
        $this->middleware('producto.update', ['only' => ['edit', 'update']]);
        $this->middleware('producto.delete', ['only' => ['destroy']]);
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

     public function index()
    {
        return view('administrador.gestionar_analisis_cbasico.index');
    }
    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */

     public function analizar1(Request $request)
     {
         /*$api_key = config('services.openai.api_key');
         OpenAI::setApiKey($api_key);
     
         $code = $request->datos;
         $solicitud = "Encuentra el camino básico para el siguiente código:\n{$code}";
     
         $response = OpenAI::completions->create([
             'engine' => 'text-davinci-002',
             'prompt' => $solicitud,
             'max_tokens' => 150,
         ]);
     
         $respuesta = $response->choices[0]->text;
         return view('administrador.gestionar_analisis_cbasico.index', compact('respuesta'));
        */}   
    
        function analizar(Request $request)
    {

        $codigo = $request->codigo;

        $requestDataGraph = [
            "model" => "text-davinci-003",
            "prompt" => "Genera un grafo de flujo para el siguiente código,
            El grafo debe seguir el formato DOT apropiado para representar el flujo de control de la función.
            El grafo debe ser ordenado
            el grafo de fluje debe ser lo mas detallado posible con la utilizacion de condiciones o bucles repetitivos
            si en el codigo existe: " . $codigo,
            "max_tokens" => 1000,
            "temperature" => 0
        ];

        $requestJsonGraph = json_encode($requestDataGraph);

        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, 'https://api.openai.com/v1/completions');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $requestJsonGraph);  // Usar el JSON construido

        $headers = array();
        $headers[] = 'Content-Type: application/json';
        $headers[] = 'Authorization: Bearer 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';
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $graph = curl_exec($ch);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }

        $graph = json_decode($graph, true);
        $generatedTextGraph = $graph['choices'][0]['text'];

        //Complejidad ciclomatica
        $requestData = [
            "model" => "text-davinci-003",
            "prompt" => "Por favor, proporciona la fórmula y los cálculos de la complejidad ciclomática del grafo proporcionado paso a paso:" .  $generatedTextGraph,
            "max_tokens" => 1000,
            "temperature" => 0
        ];

        $requestJson = json_encode($requestData);
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, 'https://api.openai.com/v1/completions');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $requestJson);  // Usar el JSON construido

        $headers = array();
        $headers[] = 'Content-Type: application/json';
        $headers[] = 'Authorization: Bearer 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';
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        
        $result = json_decode($result, true);
        $generatedText = $result['choices'][0]['text'];

        //tabla
        $requestDataTable = [
            "model" => "text-davinci-003",
            "prompt" => "Puedes generar la tabla de camino básico con sus caminos, entradas y salidas para el siguiente grafo: " . $generatedTextGraph . "y de la respuesta genera la tabla en html",
            "max_tokens" => 1000,
            "temperature" => 0
        ];

        $requestJsonTable = json_encode($requestDataTable);

        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, 'https://api.openai.com/v1/completions');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $requestJsonTable);  // Usar el JSON construido

        $headers = array();
        $headers[] = 'Content-Type: application/json';
        $headers[] = 'Authorization: Bearer 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';
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $table = curl_exec($ch);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }

        $table = json_decode($table, true);
        $generatedTextTable = $table['choices'][0]['text'];
        return view('administrador.gestionar_analisis_cbasico.ver', compact('generatedTextGraph', 'generatedText', 'generatedTextTable'));
        curl_close($ch);
    }         

}
